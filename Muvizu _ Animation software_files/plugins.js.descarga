// Avoid `console` errors in browsers that lack a console.
(function() {
    var method;
    var noop = function () {};
    var methods = [
        'assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error',
        'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log',
        'markTimeline', 'profile', 'profileEnd', 'table', 'time', 'timeEnd',
        'timeStamp', 'trace', 'warn'
    ];
    var length = methods.length;
    var console = (window.console = window.console || {});

    while (length--) {
        method = methods[length];

        // Only stub undefined methods.
        if (!console[method]) {
            console[method] = noop;
        }
    }
}());

 //Adds placeholder text for IE - https://github.com/mathiasbynens/jquery-placeholder
$(document).ready(function() 
{
    $(function () { $('input, textarea').placeholder(); });
});


$(window).load(function() {

	EnsureMenuVisible();
						
// Slide up/down main nav for mobile						
	// Get a reference to the container.
	var container = $( ".nav-wrapper" );

	// Bind the link to toggle the slide.
	$( ".mobile-nav-toggle" ).click(
		function( event ){
			// Prevent the default event.
			event.preventDefault();

			// Toggle the slide based on its current
			// visibility.
			if (container.is( ":visible" )){
				// Hide - slide up.
				container.slideUp( 500 );
			} else {
				// Show - slide down.
				container.slideDown( 500 );
			}
	});

	
	// Get a reference to the container.
	var container_two = $( ".filter-options-mobile" );

	// Bind the link to toggle the slide.
	$( ".filter-options-button" ).click(
		function( event ){
			// Prevent the default event.
			event.preventDefault();

			// Toggle the slide based on its current
			// visibility.
			if (container_two.is( ":visible" )){
				// Hide - slide up.
				container_two.slideUp( 500 );
			} else {
				// Show - slide down.
				container_two.slideDown( 500 );
			}
		});
	
	
	// Slide up/down for single blocks of content, only one per page.
	$(".nav-form").hide();
	
	$( "*[data-toggle-button]" ).click(function() {
	    var $this = $(this);

		$this.removeClass('open');
		
		var buttonType = $this.attr('dataval-id');
		var $element = $(".slidedown-content-" + buttonType);
	
		if ($element.is( ":visible" )){
			$element.slideUp(400);
			$this.removeClass('open');	
		} else {
			if ($(".nav-form:visible").size() > 0) {
				$(".nav-form:visible").slideUp(function() {
					slideDown($element, $this);
				});
			} else {
				slideDown($element, $this);
			}			
		}
		
		return false;
	});

	$( ".get-muvizu-button" ).click(function() {
									  
		$( ".get-muvizu-button" ).removeClass('open');
		
		var $this = $(this);

		var buttonType = $(this).attr('dataval-id');
		var $element = $(".getmuvizu-slide-" + buttonType);
	
		if ($element.is( ":visible" )){
			$element.slideUp(400);
			$this.removeClass('open');	
		} else {
			if ($(".download-form:visible").size() > 0) {
				$(".download-form:visible").slideUp(function() {
					slideDown($element, $this);
				});
			} else {
				slideDown($element, $this);
			}			
		}
		
		return false;
	});
	
	function slideDown ($element, $this) {
		$element.stop().slideDown(400);
		$this.addClass('open');
	}
	
	
	resetHeight();
	
	// reset height on resize of the window:
	$(window).resize(function() { 
		resetHeight();
    });

	FixMogulColumns();

	
// Elastislide carousel initialiser
	InitialiseCarousel();
	

// Organic tabs
	try
	{
		if ( $(".tabs-container").length > 0 ) 
		{
			$(".tabs-container").organicTabs();
		}
	}
	catch(err)
	{
	}
	
});	


// Elastislide carousel initialiser
	function InitialiseCarousel()
	{
		try
		{
			if ( $('.vert-carousel').length > 0 )
			{
				$( '.vert-carousel' ).elastislide( {
						orientation : 'vertical',
						speed : 1000,
						minItems : 2
					});
			}
	
			if ( $('.mini-dark-carousel ul').length > 0 )
			{
				$( '.mini-dark-carousel ul' ).elastislide( {
					orientation : 'horizontal',
					speed : 1000,
					minItems : 4
				});
			}
		}
		catch(err)
		{
		}
	}


	// This is used to give equal height to columns	
	// equalises the height of columns
	function resetHeight() 
	{
		var maxHeight = 0;
	   
	   if ( $(".customer-list p") )
	   {
		   $(".customer-list p").height("auto").each(function(){ 
			   maxHeight = $(this).height() > maxHeight ? $(this).height() : maxHeight; 
		   }).height(maxHeight);
		}
	   
	   if ( $(".community-latest-list .equalise") )
	   {
		   $(".community-latest-list .equalise").height("auto").each(function(){ 
			   maxHeight = $(this).height() > maxHeight ? $(this).height() : maxHeight;
			}).height(maxHeight);
		}
		/*
		if ( $(".video-list figcaption") )
		{
			$(".video-list figcaption").height("auto").each(function () {
				maxHeight = $(this).height() > maxHeight ? $(this).height() : maxHeight;
			}).height(maxHeight);
		}
		*/
		if ( $(".community-list li") )
		{
			$(".community-list li:not(.resize-ignore)").height("auto").each(function () {
				maxHeight = $(this).height() > maxHeight ? $(this).height() : maxHeight;
			}).height(maxHeight);
		}

		if ( $(".assets-list figure") )
		{
			$(".assets-list figure").height("auto").each(function () {
				maxHeight = $(this).height() > maxHeight ? $(this).height() : maxHeight;
			}).height(maxHeight);
		}

		$('.price-first').height( $('.price-mid').height() );
		var imgTop = ($('.price-first').height() / 2) - ($('.price-first img').height() / 2);
		$('.price-first img').css('top', imgTop >= 0 ? imgTop : 0);
	}

function FixMogulColumns()
{
	// MOGULS equal height rows
	// these are (ruh-roh) globals. You could wrap in an
	// immediately-Invoked Function Expression (IIFE) if you wanted to...
	// css-tricks.com/equal-height-blocks-in-rows/

	var currentTallest = 0,
    currentRowStart = 0,
    rowDivs = new Array();

	function setConformingHeight(el, newHeight) {
	    // set the height to something new, but remember the original height in case things change
	    el.data("originalHeight", (el.data("originalHeight") == undefined) ? (el.height()) : (el.data("originalHeight")));
	    el.height(newHeight);
	}
	function getOriginalHeight(el) {
	    // if the height has changed, send the originalHeight
	    return (el.data("originalHeight") == undefined) ? (el.height()) : (el.data("originalHeight"));
	}
	function columnConform() {
	    // find the tallest DIV in the row, and set the heights of all of the DIVs to match it.
	    $('.moguls-list li p').each(function () {
	        // "caching"
	        var $el = $(this);
	        var topPosition = $el.position().top;
	        if (currentRowStart != topPosition) {
	            // we just came to a new row. Set all the heights on the completed row
	            for (currentDiv = 0; currentDiv < rowDivs.length; currentDiv++) setConformingHeight(rowDivs[currentDiv], currentTallest);
	            // set the variables for the new row
	            rowDivs.length = 0; // empty the array
	            currentRowStart = topPosition;
	            currentTallest = getOriginalHeight($el);
	            rowDivs.push($el);
	        } else {
	            // another div on the current row. Add it to the list and check if it's taller
	            rowDivs.push($el);
	            currentTallest = (currentTallest < getOriginalHeight($el)) ? (getOriginalHeight($el)) : (currentTallest);
	        }
	        // do the last row
	        for (currentDiv = 0; currentDiv < rowDivs.length; currentDiv++) setConformingHeight(rowDivs[currentDiv], currentTallest);
	    });
	}
	$(window).resize(function () {
	    columnConform();
	});
	// Dom Ready
	// You might also want to wait until window.onload if images are the things that
	// are unequalizing the blocks
	$(function () {
	    columnConform();
	}); 
    
}

function SetWhatisMuvizuTabs(hash)
{
	if (hash === '' || hash === '_=_' || hash === 'undefined') { //ML - '_=_' is to account for hack from FB to stop url hijacking
		hash = 'Educators'; // "tab-one";
	}

	if (hash === 'Educators')
	{
		hash = 'tab-one';
	}
	else if (hash === 'Animators')
	{
		hash = 'tab-two';
	}
	if (hash === 'Business')
	{
		hash = 'tab-three';
	}
	if (hash === 'Storytellers')
	{
		hash = 'tab-four';
	}
			
	var className = "." + hash.replace("-", "-nav-");
	var idName = "#" + hash;

	$(className + " a").addClass("current");
	$(idName).hide('fast', function () 
		{
			$(idName).removeClass('hide');
			$(idName).fadeIn("fast");
		});
				
}

function EnsureMenuVisible()
{
	$(window).on('resize', function ()
	{
		var win = $(this);
		if (win.width() >= 600)
		{
			$('.nav-wrapper').attr('style', 'display:auto');
		}
	});
} 